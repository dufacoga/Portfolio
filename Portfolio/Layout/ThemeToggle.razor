@inject IJSRuntime JS

<!-- Theme selection dropdown button -->
<div class="dropdown" id="themeDropdown">
	<button class="dropdown-button" onclick="toggleDropdown(event)">
		<i class="fas fa-sliders-h"></i>
		Change Theme
		<i class="fas fa-chevron-down"></i>
	</button>

	<!-- Dropdown menu with three selectable themes -->
	<div class="dropdown-menu">
		<div class="dropdown-item" onclick="setTheme('default')">Default</div>
		<div class="dropdown-item" onclick="setTheme('dark')">Dark</div>
		<div class="dropdown-item" onclick="setTheme('light')">Light</div>
	</div>
</div>

@code {
	// Callback to notify parent components when theme changes
	[Parameter] public EventCallback<string> OnThemeChanged { get; set; }

	// DotNet reference to allow JS to call Blazor method
	private DotNetObjectReference<ThemeToggle> _dotNetRef;

	// Registers the theme change callback on first render
	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetRef = DotNetObjectReference.Create(this);
			JS.InvokeVoidAsync("registerThemeChangeHandler", _dotNetRef);
		}
	}

	// Method invoked by JavaScript to pass back the selected theme
	[JSInvokable]
	public async Task NotifyThemeChange(string theme)
	{
		await OnThemeChanged.InvokeAsync(theme);
	}

	// Dispose DotNet reference to prevent memory leaks
	public void Dispose()
	{
		_dotNetRef?.Dispose();
	}
}